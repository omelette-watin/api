// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  hash        String
  createdAt   DateTime     @default(now())
  urlAvatar   String?
  profileName String?
  bio         String?
  tweets      Tweet[]
  retweets    Retweet[]
  likes       Like[]
  tweetEvents TweetEvent[]
  followers   Follows[]    @relation("follower")
  following   Follows[]    @relation("following")
}

model Tweet {
  id              String       @id @default(cuid())
  plainText       String
  createdAt       DateTime     @default(now())
  deletedAt       DateTime?
  media           String[]
  author          User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  originalTweet   Tweet?       @relation("replies", fields: [originalTweetId], references: [id], onDelete: Cascade)
  originalTweetId String?
  replies         Tweet[]      @relation("replies")
  likes           Like[]
  retweets        Retweet[]
  hashtags        Hashtag[]
  events          TweetEvent[]
}

model TweetEvent {
  id            String @id @default(cuid())
  createdAt     String
  authorId      String
  author        User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  targetTweetId String
  targetTweet   Tweet  @relation(fields: [targetTweetId], references: [id], onDelete: Cascade)
}

model Follows {
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("follower", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  tweets    Tweet[]
}

model Retweet {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

}

model Like {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}
